#!/bin/bash
#
# This sets up the specified version and working area.
# Source directory stays the same
# (meaning that we should not really play with the version number too much)
# but the build directory is changed to reflect the quality flags.
#

###
### general setup script
### look for which experiment we are working for, and use their setup script;
### if can't detect the experiment, use a generic setup script
###
declare local_setup_basedir
while true ; do # fake loop
	for local_setup_basedir in "$(pwd)" "$(dirname "$BASH_SOURCE")" ; do
		case "$local_setup_basedir" in
			( *'/MicroBooNE/'* | *'/uboone/'* )
				# MicroBooNE setup adds to the above a specific UPS repository
				echo "MicroBooNE specific setup"
				source "/grid/fermiapp/uboone/software/setup_uboone.sh"
				break 2
				;;
			( *'/LBNE/'* | *'/lbne/'* )
				echo "LBNE specific setup"
				source "/grid/fermiapp/lbne/software/setup_lbne.sh"
				break 2
				;;
		esac
	done # for
	
	# this is experiment-agnostic setup, in case no setup has been performed yet
	echo "Generic LArSoft setup"
	source /grid/fermiapp/products/larsoft/setup
	setup git
	setup gitflow
	setup mrb
	export MRB_PROJECT=larsoft
	break
done # while

###
### determine version and qualifiers
### from parameters, script name and execution path
###
declare local_setup_version
declare local_setup_qual
if [[ -n "$2" ]]; then
	local_setup_qual="${2#_}"
	local_setup_qual="${local_setup_qual//:/_}"
elif [[ "$local_setup_qual" == "${local_setup_qual#setup_}" ]]; then
	# find the version in the current path
	for local_setup_basedir in "$(pwd)" "$(dirname "$BASH_SOURCE")" ; do
		local_setup_qual="" # set to the directory following the version in the path
		while [[ "$local_setup_basedir" != "/" ]] && [[ "$local_setup_basedir" != "." ]]; do
			local_setup_version="$(basename "$local_setup_basedir")"
		#	echo "Considering: '${local_setup_version}' ('${local_setup_basedir}')"
			[[ "$local_setup_version" =~ 'v[[:digit:]]+_[[:digit:]]{2}_[[:digit:]]{2}$' ]] && break 2
			if [[ -h "$local_setup_basedir" ]]; then
				local_setup_version="$(basename "$(readlink "$local_setup_basedir")")"
			#	echo "  link: considering also: '${local_setup_version}' ('${local_setup_basedir}')"
				[[ "$local_setup_version" =~ 'v[[:digit:]]+_[[:digit:]]{2}_[[:digit:]]{2}$' ]] && break 2
			fi
			local_setup_qual="$(basename "$local_setup_basedir")"
			local_setup_basedir="$(dirname "$local_setup_basedir")"
		done
		local_setup_version=""
		local_setup_qual="" # no found version => no qualifiers either
	done
else
	local_setup_qual="${local_setup_qual#setup_}"
fi
: ${local_setup_version:="${1:-"v0_02_01"}"}
: ${local_setup_qual:="e4:prof"}
declare local_setup_spec="${local_setup_version}${local_setup_qual:+"_${local_setup_qual//:/_}"}"

###
### regular setup
### needed for both building and running code
###
declare local_setup_script="builds/${local_setup_spec}/localProducts_larsoft_${local_setup_spec}/setup"
[[ ! -r "$local_setup_script" ]] && [[ -r "localProd/setup" ]] && local_setup_script="localProd/setup"
if [[ -r "$local_setup_script" ]]; then
	echo "Picking setup from: '$(readlink -f "${local_setup_script}")'"
	source "$local_setup_script"
	
	# if we could not figure out which version we are working on,
	# we ask MBR, which probably will have already
	[[ -z "$local_setup_version" ]] && local_setup_version="$MRB_PROJECT_VERSION"
	[[ -z "$local_setup_qual" ]] && [[ -n "$local_setup_version" ]] && [[ "$local_setup_version" == "$MRB_PROJECT_VERSION" ]] && local_setup_qual="$MRB_QUALS"
	
	if [[ -n "$local_setup_version" ]]; then
		echo "Setting up LArSoft ${local_setup_version}${local_setup_qual:+" (${local_setup_qual//_/:})"} from UPS"
		setup larsoft "$local_setup_version" ${local_setup_qual:+-q  "${local_setup_qual//_/:}"}
		echo "  (at dir: '${LARSOFT_DIR}')"
	fi
else
	echo "ERROR: no ${local_setup_script} found. Setup is incomplete." >&2
fi

###
### setup from source directory
### needed only if building code
###
declare local_setup_build_script="srcs/setEnv"
if [[ -r "$local_setup_build_script" ]]; then
	source mrb setEnv
else
	echo "ERROR: no ${local_setup_build_script} found. Setup is incomplete (still, runtime should work)." >&2
fi

# add our scripts directory to the path, if present
for local_setup_scriptsdir in "scripts" "$(dirname "$local_setup_script")/scripts" "${local_setup_basedir}/scripts" ; do
	[[ -d "scripts" ]] || continue
	if which dropit >& /dev/null ; then
		PATH="$(dropit -eSDs "$(pwd)/scripts")"
	else
		PATH="${PATH}:$(pwd)/scripts"
	fi
	export PATH
	break
done

###
### clean the environment!
###
unset local_setup_basedir local_setup_version local_setup_qual local_setup_spec local_setup_script local_setup_build_script local_setup_scriptsdir
