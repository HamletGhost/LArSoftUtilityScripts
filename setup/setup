#!/usr/bin/env bash
#
# This sets up a MRB working area for LArSoft, according to the specified mode.
# 
# Usage:
# 
# [source] setup [mode [version [qualifiers [experiment]]]]
# 
# Mode can be:
# - 'base': very basic setup: UPS, MRB, git
# - 'prod': production run setup, to run code from official UPS repository
# - 'runtime': run setup, to run code from a developement-like area
# - 'develop': development setup, to compile/install in the developement area
# - 'all': full development setup, to develop and run in the same area
#

function IsInList() {
	# Usage:  IsInList Key [Item ...]
	# Returns 0 if the key is one of the other specified items
	local Key="$1"
	shift
	local Item
	for Item in "$@" ; do
		[[ "$Item" == "$Key" ]] && return 0
	done
	return 1
} # IsInList()


function SortUPSqualifiers() {
	# Usage:  SortUPSqualifiers  Qualifiers [Separator]
	# sorts the specified qualifiers (colon separated by default)
	# The current sorting is: alphabetically, but move debug/opt/prof to the end
	local qual="$1"
	local sep="${2:-":"}"
	local item
	local -i nItems=0
	local -ar AllSpecials=( 'prof' 'opt' 'debug' )
	local -a Specials
	for item in $(tr "$sep" '\n' <<< "$qual" | sort) ; do
		if IsInList "$item" "${AllSpecials[@]}" ; then
			Specials=( "${Specials[@]}" "$item" )
			continue
		fi
		[[ "$((nItems++))" == 0 ]] || echo -n "$sep"
		echo -n "$item"
	done
	# add the special qualifiers at the end, in the original relative order
	for item in "${Specials[@]}" ; do
		[[ "$((nItems++))" == 0 ]] || echo -n "$sep"
		echo -n "$item"
	done
	echo
	return 0
} # SortUPSqualifiers()


################################################################################
###
### find the elemental setup script; without it we are lost
###
declare local_scriptdir="$(dirname "$(readlink -f "${BASH_SOURCE:-$0}")")"
if [[ ! -f "${local_scriptdir}/plain_setup" ]]; then
	echo "Can't find the elemental setup script '${local_scriptdir}/plain_setup', no setup is possible." >&2
	return 2
fi

function local_setup_element() {
	source "${local_scriptdir}/plain_setup" "$1" "$local_setup_version" "$local_setup_qual" "$local_setup_experiment" "$local_setup_package"  "$local_setup_package_version"
}

###
### Autodetection of the working area features
###

declare -a local_setup_autodetection
declare local_setup_autodetection_script="$(which 'autodetectLArSoft.sh' >& /dev/null)"
[[ -x "$local_setup_autodetection_script" ]] || local_setup_autodetection_script="${local_scriptdir}/autodetectLArSoft.sh"
[[ -x "$local_setup_autodetection_script" ]] || local_setup_autodetection_script="$(dirname "$local_scriptdir")/autodetectLArSoft.sh"
if [[ -x "$local_setup_autodetection_script" ]] ; then
	local_setup_autodetection=( $("$local_setup_autodetection_script" -v -q -e -L -p "nightly" "debug:e5" "LArSoft") )
else
	echo "Autodetection skipped." >&2
	local_setup_autodetection=( "" "debug:e5" "LArSoft" 'larsoft' "" )
fi
unset local_setup_autodetection_script

###
### Override by the command line parameters
###
declare local_setup_mode="$(tr '[:upper:]' '[:lower:]' <<< "${1:-all}")"
case "$local_setup_mode" in
	( 'base' | 'develop' | 'runtime' | 'all' | 'prod' ) ;;
	( 'step_'* ) ;;
	( * ) local_setup_mode='all' ;;
esac

declare local_setup_version="${2:-${local_setup_autodetection[0]}}"
declare local_setup_qual="${3:-${local_setup_autodetection[1]}}"
declare local_setup_experiment="${4:-${local_setup_autodetection[2]}}"
declare local_setup_package="${local_setup_autodetection[3]:-'larsoft'}"
declare local_setup_package_version="${local_setup_autodetection[4]:-${local_setup_version}}"
unset local_setup_autodetection

###
### fill in the needed parameters
###
local_setup_qual="$(SortUPSqualifiers "${local_setup_qual//_/:}")"
unset -f SortUPSqualifiers IsInList

###
### if not sourced, just print what would happen
###
if [[ "$(basename -- "${BASH_SOURCE[0]}")" == "$(basename -- "$0")" ]]; then
	
	declare local_setup_script="$(local_setup_element 'printlocalproductsscript')"
	
	cat <<-EOM
	Setup type:              ${local_setup_mode}
	Experiment:              ${local_setup_experiment}
	LArSoft version:         ${local_setup_version}
	LArSoft qualifiers:      ${local_setup_qual}
	Local product setup:    '${local_setup_script}'
	Leading package:         ${local_setup_package}
	Leading package version: ${local_setup_package_version}
	EOM
	
	echo "This script needs to be sourced." >&2
	exit 1
fi

if [[ -z "$local_setup_version" ]]; then
	echo "I don't know which LArSoft version to set up!" >&2
	return 1
fi


declare -i local_setup_myErrors=0

# this will be used, if present, by the elemental setup script
declare -i local_setup_nOutput=0

###
### base setup (all modes)
###
case "$local_setup_mode" in
	( 'base' | 'runtime' | 'develop' | 'prod' | 'all' | 'step_base' )
		local_setup_element 'base' || let ++local_setup_myErrors
		;;
	( * ) ;;
esac

###
### local products UPS setup (all modes except base)
###
case "$local_setup_mode" in
	( 'runtime' | 'develop' | 'all' | 'step_localproducts' )
		local_setup_element 'localproducts' || let ++local_setup_myErrors
		;;
	( * ) ;;
esac

###
### LArSoft setup (runtime and "all" modes)
###
case "$local_setup_mode" in
	( 'runtime' | 'prod' | 'all' | 'step_larsoft' )
		local_setup_element 'larsoft' || let ++local_setup_myErrors
		;;
	( * ) ;;
esac

###
### build environment setup
###
case "$local_setup_mode" in
	( 'develop' | 'all' | 'step_build' )
		local_setup_element 'build' || let ++local_setup_myErrors
		;;
	( * ) ;;
esac


###
### wrap up, clean and say goodbye
###
unset -f local_setup_element
if [[ $local_setup_myErrors -gt 0 ]]; then
	echo "Set up (${local_setup_mode}) incomplete."
	unset local_setup_mode local_setup_myErrors
	return 1
fi
echo "Set up (${local_setup_mode}) complete."
unset local_setup_mode local_setup_myErrors
return 0
