#!/bin/bash
#
# This sets up a MRB working area for LArSoft, according to the specified mode.
# No autodetection is performed and all parameters must be specified.
# 
# Usage:
# 
# [source] setup mode version qualifiers experiment
# 
# Mode can be:
# - 'base': very basic setup: UPS, MRB, git
# - 'localproducts': setup of the UPS repository containing the local products
# - 'localproductssetup': setup of the local products
# - 'larsoft': setup of larsoft and the experiment-specific packages
# - 'build': setup the MRB building environment
#

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
	echo "This script needs to be sourced." >&2
	exit 1
fi

function IsInList() {
	# Usage:  IsInList Key [Item ...]
	# Returns 0 if the key is one of the other specified items
	local Key="$1"
	shift
	local Item
	for Item in "$@" ; do
		[[ "$Item" == "$Key" ]] && return 0
	done
	return 1
} # IsInList()


function SortUPSqualifiers() {
	# Usage:  SortUPSqualifiers  Qualifiers [Separator]
	# sorts the specified qualifiers (colon separated by default)
	# The current sorting is: alphabetically, but move debug/opt/prof to the end
	local qual="$1"
	local sep="${2:-":"}"
	local item
	local -i nItems=0
	local -ar AllSpecials=( 'prof' 'opt' 'debug' )
	local -a Specials
	for item in $(tr "$sep" '\n' <<< "$qual" | sort) ; do
		if IsInList "$item" "${AllSpecials[@]}" ; then
			Specials=( "${Specials[@]}" "$item" )
			continue
		fi
		[[ "$((nItems++))" == 0 ]] || echo -n "$sep"
		echo -n "$item"
	done
	# add the special qualifiers at the end, in the original relative order
	for item in "${Specials[@]}" ; do
		[[ "$((nItems++))" == 0 ]] || echo -n "$sep"
		echo -n "$item"
	done
	echo
	return 0
} # SortUPSqualifiers()


################################################################################
###
### Early parameter check (so that we don't pollute the environment for nothing)
###
declare local_setup_mode="$(tr '[:upper:]' '[:lower:]' <<< "${1:-all}")"
case "$local_setup_mode" in
	( 'base' \
	  | 'printlocalproductsscript' \
	  | 'localproducts' | 'lp' \
	  | 'localproductssetup' | 'slp' \
	  | 'larsoft' \
	  | 'build' \
	  )
		;;
	( * )
		echo "ERROR: setup submode '${local_setup_mode}' not supported." >&2
		unset local_setup_mode
		return 1
		;;
esac

################################################################################
###
### Learn about the working area features from the caller
###
declare local_scriptdir="$(dirname "$(readlink -f "${BASH_SOURCE:-$0}")")"

declare local_setup_version="$2"
declare local_setup_qual="$3"
declare local_setup_experiment="$4"
declare local_setup_package="${5:-'larsoft'}"
declare local_setup_package_version="${6:-${local_setup_version}}"

###
### fill in the needed parameters
###
local_setup_qual="$(SortUPSqualifiers "${local_setup_qual//_/:}")"
unset -f SortUPSqualifiers IsInList

case "$local_setup_mode" in
	( 'base' )
		###
		### base set up (UPS, MRB, git)
		###
		declare -i local_setup_nErrors=0
		declare local_setup_base_script
		[[ -d "/grid/fermiapp" ]] && local_setup_base_type="local"
		
		case "$local_setup_experiment" in
			( 'MicroBooNE' )
				# MicroBooNE setup adds to the above a specific UPS repository
				echo " * MicroBooNE specific setup"
			#	local_setup_base_script="/grid/fermiapp/uboone/software/setup_uboone.sh"
				local_setup_base_script="/grid/fermiapp/products/uboone/setup_uboone.sh"
				if [[ -r "$local_setup_base_script" ]]; then
					source "$local_setup_base_script" || let ++local_setup_nErrors
				else
					echo "    base setup script '${local_setup_base_script}' not available -- using local setup."
					local_setup_base_script=":golocal:"
				fi
				;;
			( 'LBNE' )
				echo " * LBNE specific setup"
				local_setup_base_script="/grid/fermiapp/lbne/software/setup_lbne.sh"
				if [[ -r "$local_setup_base_script" ]]; then
					source "$local_setup_base_script" || let ++local_setup_nErrors
				else
					echo "    base setup script '${local_setup_base_script}' not available -- using local setup."
					local_setup_base_script=":golocal:"
				fi
				;;
			( * )
				# this is experiment-agnostic setup:
				echo " * generic LArSoft setup (${local_setup_experiment})"
				local_setup_base_script="/grid/fermiapp/products/larsoft/setup"
				if [[ -r "$local_setup_base_script" ]]; then
					source "$local_setup_base_script" || let ++local_setup_nErrors
					setup git || let ++local_setup_nErrors
					setup gitflow || let ++local_setup_nErrors
					setup mrb || let ++local_setup_nErrors
					export MRB_PROJECT=larsoft
				else
					echo "    base setup script '${local_setup_base_script}' not available -- using local setup."
					local_setup_base_script=":golocal:"
				fi
				;;
		esac
		
		if [[ "$local_setup_base_script" == ":golocal:" ]]; then
			# this is experiment-agnostic setup:
			echo " * local LArSoft setup"
			# hope "Setup UPS_local" means something in your system...
			let ++local_setup_nOutput
			Setup UPS_local  >& >(sed -e "s/^/    [${local_setup_nOutput}> /")
			if ! which git >& /dev//null ; then
				setup git || let ++local_setup_nErrors
				setup gitflow || let ++local_setup_nErrors
			fi
			# set up MRB (current version)
			setup mrb || let ++local_setup_nErrors
			export MRB_PROJECT=larsoft
		fi
		
		# set up UPS repositories used only as fallback
		Setup UPS_fallback  >& >(sed -e "s/^/    [${local_setup_nOutput}> /")
		
		# set up UPS again, in case some newer version has become available
		setup ups || let ++local_setup_nErrors
		
		unset local_setup_base_script
		if [[ $local_setup_nErrors -gt 0 ]]; then
			unset local_setup_nErrors
			return 1
		fi
		unset local_setup_nErrors
		return 0
		;; # base
	
	( 'printlocalproductsscript' )
		###
		### local products UPS setup: just print the script
		###
		
		# find which local product setup script to source
		declare local_setup_spec="${local_setup_version}_${local_setup_qual//:/_}"
		declare local_setup_script="localProducts_${MRB_PROJECT:-"larsoft"}_${local_setup_spec}/setup"
		[[ ! -r "$local_setup_script" ]] && [[ -r "localProd/setup" ]] && local_setup_script="localProd/setup"
		[[ ! -r "$local_setup_script" ]] && [[ -r "localProducts/setup" ]] && local_setup_script="localProducts/setup"
		if [[ ! -r "$local_setup_script" ]]; then
			while : ; do
				for local_setup_script in localProducts_larsoft_*/setup ; do
					[[ -x "$local_setup_script" ]] && break 2
				done
				# restore the value for error messages
				local_setup_script="localProducts_larsoft_${local_setup_spec}/setup"
				break
			done # fake loop
		fi
		echo "$local_setup_script"
		unset local_setup_script local_setup_spec
		return 0
		;;
	
	( 'localproducts' | 'lp' )
		###
		### local products UPS setup
		###
		
		# find which local product setup script to source
		declare local_setup_script="$(source "$BASH_SOURCE" 'printlocalproductsscript' "$local_setup_version" "$local_setup_qual" "$local_setup_experiment")"
		
		echo " * local products UPS area set up"
		if [[ -r "$local_setup_script" ]]; then
			echo "   => setup: '$(readlink -f "${local_setup_script}")'"
			[[ -n "$local_setup_nOutput" ]] && let ++local_setup_nOutput
			source "$local_setup_script" >& >(sed -e "s/^/    [${local_setup_nOutput:-"="}> /")
		else
			echo "No ${local_setup_script} found. Only official packages will be used!" >&2
			return 1
		fi
		unset local_setup_spec local_setup_script
		return 0
		;; # local products
	
	( 'localproductssetup' | 'slp' )
		###
		### local products setup
		###
		echo " * local products set up"
		source mrb slp
		;;
	
	( 'larsoft' )
		###
		### LArSoft setup
		###
		### Code names are set for potentially other set up
		###
		### Codename settings: product@version@quals
		### If quals is omitted, empty qualifiers are used.
		### If @quals is omitted, default qualifiers are used.
		### If version is omitted, the "current" version is used (no version specified).
		### If @version is omitted, the default version is used.
		### Therefore, a "@@" means current version with no qualifiers.
		###
		declare -a local_setup_codenames=( "$local_setup_package" )
		case "$local_setup_experiment" in
			( 'MicroBooNE' )
				local_setup_codenames=( "${local_setup_codenames[@]}" )
				;;
			( 'LBNE' )
				local_setup_codenames=( "${local_setup_codenames[@]}" )
				;;
			( 'AllExperiments' )
				local_setup_codenames=( "${local_setup_codenames[@]}" 'lbnecode' 'uboonecode' )
				;;
			( * )
				local_setup_codenames=( "${local_setup_codenames[@]}" )
				;;
		esac
		
		declare local_setup_codename
		declare -i local_setup_nErrors=0
		for local_setup_codename in "${local_setup_codenames[@]}" ; do
			declare local_setup_codeversion="${local_setup_codename#*@}"
			declare local_setup_codequals
			
			if [[ "$local_setup_codeversion" == "$local_setup_codename" ]]; then
				local_setup_codeversion="$local_setup_package_version"
				local_setup_codequals="${local_setup_qual//_/:}"
			else
				local_setup_codename="${local_setup_codename%"@${local_setup_codeversion}"}"
				
				local_setup_codequals="${local_setup_codeversion#*@}"
				if [[ "$local_setup_codequals" == "$local_setup_codeversion" ]]; then
					local_setup_codequals="${local_setup_qual//_/:}"
				else
					local_setup_codeversion="${local_setup_codeversion%"@${local_setup_codequals}"}"
					: [[ -z "$local_setup_codequals" ]] # empty is ok
				fi
			fi
			echo " * ${local_setup_codename} ${local_setup_codeversion:-"(current)"} set up${local_setup_codequals:+" (${local_setup_codequals})"}"
			setup "$local_setup_codename" ${local_setup_codeversion:+"$local_setup_codeversion"} ${local_setup_codequals:+-q  "${local_setup_codequals//_/:}"}
			[[ $? == 0 ]] || let ++local_setup_nErrors
		done
		unset local_setup_codenames local_setup_codename local_setup_codeversion local_setup_codequals
		if [[ $local_setup_nErrors -gt 0 ]]; then
			unset local_setup_nErrors
			return 1
		fi
		unset local_setup_nErrors
		return 0
		;; # larsoft
	
	( 'build' )
		###
		### build environment setup
		###
		echo " * build environment set up"
		let ++local_setup_nOutput
		declare -a local_setup_MRBsetEnv
		if [[ "$(cut -d' ' -f2 <<< "$SETUP_MRB" | cut -b1-2)" == "v0" ]]; then
			local_setup_MRBsetEnv=( source mrb setEnv )
		else
			local_setup_MRBsetEnv=( mrbsetenv )
		fi
		"${local_setup_MRBsetEnv[@]}" >& >(sed -e "s/^/    [${local_setup_nOutput}> /")
		unset local_setup_MRBsetEnv
		;; # build
	
	( * )
		echo "ERROR: setup submode '${local_setup_mode}' not supported." >&2
		return 1
esac
